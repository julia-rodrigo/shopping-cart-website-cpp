#include <boost/asio.hpp>
#include <boost/asio/streambuf.hpp>
#include <iostream>
#include <string>
#include <map>

#include "ShoppingCart.h"
#include "Item.h"

using namespace std;


string read_request(boost::asio::ip::tcp::socket& socket) {
    string request_string;
    boost::asio::streambuf request_buf;
    boost::asio::read_until(socket, request_buf, "\r\n\r\n");
    request_string = boost::asio::buffer_cast<const char*>(request_buf.data());
    return request_string;
}

map<string, string> get_request_parameters(string request_string) {
    string body = request_string.substr(request_string.find("\r\n\r\n") + 4) + "&";

    map<string, string> parameters;
    string delimiter = "&";
    size_t pos = 0;
    string token;
    while ((pos = body.find(delimiter)) != string::npos) {
        token = body.substr(0, pos);
        size_t equal_pos = token.find("=");
        string key = token.substr(0, equal_pos);
        string value = token.substr(equal_pos + 1);
        parameters[key] = value;
        body.erase(0, pos + delimiter.length());
    }

    return parameters;
}

string urldecode(string encoded_string) {
    string decoded_string;
    for (string::iterator it = encoded_string.begin(); it != encoded_string.end(); ++it) {
        if (*it == '%') {
            decoded_string += (char)stoi(string(it + 1, it + 3), nullptr, 16);
            it += 2;
        }
        else if (*it == '+') {
            decoded_string += ' ';
        }
        else {
            decoded_string += *it;
        }
    }
    return decoded_string;
}

int main() {
    boost::asio::io_context ioc;
    boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::tcp::v4(), 8081);
    boost::asio::ip::tcp::acceptor acceptor(ioc, endpoint);

    while (true) {
        boost::asio::ip::tcp::socket socket(ioc);
        acceptor.accept(socket);

        cout << "Client connect from: " << socket.remote_endpoint() << endl;

        //REad request
        string request_string = read_request(socket);

        // Read parameters from request
        map<string, string> parameters = get_request_parameters(request_string);

        // Shopping cart declared
        ShoppingCart cart;
        cart.readFromJSON("cart.json");


        // Add cart item from request
        if (parameters.count("name") > 0) {
            double price = stod( parameters["price"] );
            cart.addItem( Item( parameters["name"], price ));
            cart.save();
        }

        // add items

        /*cart.addItem(Item("Apple Juice",            1.50));
        cart.addItem(Item("Bboy for dummies",       7.50));
        cart.addItem(Item("Feathery pencil",        2.00));
        cart.addItem(Item("piano",                  1599.99));
        cart.addItem(Item("c++ user manual",        0.01));
        cart.addItem(Item("Pokemon Black version",  100.00));*/

        string cart_table = cart.getCartContentsAsHTMLTable();

        // create add item form
        string add_item_to_cart_html = "<form method=\"post\">"
            "<input type=\"text\" name=\"name\" placeholder=\"Name\"/>"
            "<input type=\"text\" name=\"price\" size=\"5\" placeholder=\"Price\"/>"
            "<input type=\"submit\" value=\"Add to cart\"/>"
            "</form>";

        // create html responds
        string html =   "<html>"
                            "<head>"
                                "<title> C++ Website </title>"
                            "</head>"
                            "<body>"
                                "<h1>This is a C++ website welcome</h1>"
                                "<p>Generated by a C++ program, with boost asio and dotnet</p>"
                                "<pre>I ran it on an nginx server! the files are in my git projects</pre>"
                                + add_item_to_cart_html +
                                "<h2>Cart</h2>"
                                + cart_table +
                            "</body>"
                        "</html>";

        // get content length
        int content_length = html.length();
        string content_length_string = to_string(content_length);

        // add headers to respond
        string headers = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nContent-Length: " + content_length_string + "\r\nConnection: Close\r\n\r\n";
        
        // Send headers
        boost::asio::write(socket, boost::asio::buffer(headers));

        // Send HTML
        boost::asio::write(socket, boost::asio::buffer(html));
    }

    cout << "exit";

    return 0;
}